#Word Search
public boolean exist(char[][] board, String word) {
    int rows = board.length;
    int cols = board[0].length;
    boolean [][] visited = new boolean [rows][cols];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (board[i][j] == word.charAt(0) && searchWord (board, word, i, j, 0, visited)) {
                return true;
            }
        }
    }
    return false;
}

public boolean searchWord(char [][] board, String word, int i, int j, int count, boolean [][] visited) {
    if (count == word.length()) return true;
    if (i < 0 || i >= board.length || j < 0 || j >= board[0].length 
        || board[i][j] != word.charAt(count) || visited[i][j]) {
            return false;
        }
    visited[i][j] = true;

    if (
        searchWord (board, word, i + 1, j, count + 1, visited)
        || searchWord (board, word, i - 1, j, count + 1, visited)
        || searchWord (board, word, i, j +1, count + 1, visited)
        || searchWord (board, word, i, j -1, count + 1, visited)
    ) return true;

    visited[i][j] = false;
    return false;
}

#Remove Element
public int removeElement(int[] nums, int val) {
    int k = 0;
    int n = nums.length;
    for (int i = 0; i< n; i++) {
        if (nums[i] != val) {
            nums[k++] = nums[i];
        }
    }
    return k;
}


# Group Anagrams
public List<List<String>> groupAnagrams(String[] strs) {
    Map<String, List<String>> map = new HashMap<>();

    for (String word: strs) {
        // sort the str and use it as a key
        char [] wordArray = word.toCharArray();
        Arrays.sort(wordArray);
        String key = new String(wordArray);
        // if map doesn't contain sorted array, create key-val pair and add it there
        if (!map.containsKey(key)) {
            List<String> ana = new ArrayList<>();
            ana.add(word);
            map.put(key, ana);
        }
        // if map contains this key already, get this lits and add new element, and add list back
        else {
            List<String> existing = map.get(key);
            existing.add(word);
            map.put(key,existing);
        }
    }
    
    return new ArrayList<>(map.values());
} 
        

# Set matrix zeroes
public void setZeroes(int[][] matrix) {
    int m = matrix.length;
    int n = matrix[0].length;

    Set<Integer> row = new HashSet<>();
    Set<Integer> col = new HashSet<>();
    
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (matrix[i][j] == 0) {
                row.add(i);
                col.add(j);
            }
        }
    }
    
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (row.contains(i) || col.contains(j)) {
                matrix[i][j] = 0;
            }
        }
    }
}     

#Merge Intervals
public int[][] merge(int[][] intervals) {
    Arrays.sort (intervals, (a, b) -> Integer.compare(a[0], b[0]));
    LinkedList<int []>  merged = new LinkedList<>();
    for (int [] interval : intervals) {
        if (merged.isEmpty() || merged.getLast()[1] < interval[0]) {
            merged.add(interval);
        } else {
            merged.getLast()[1] = Math.max(interval[1], merged.getLast()[1]);
        } 
    }

    return merged.toArray(new int[merged.size()][]);
}

#Spiral Matrix
public List<Integer> spiralOrder(int[][] matrix) {
    int top = 0;
    int bottom = matrix.length-1;
    int left = 0;
    int right = matrix[0].length-1;
    int size = matrix.length * matrix[0].length;
    List<Integer> nums = new ArrayList<>();

    while (nums.size() < size) {
        for (int i = left; i <= right && nums.size() < size; i++) {
            nums.add(matrix[top][i]);
        }
        top++;

        for (int i = top; i <= bottom && nums.size() < size; i++) {
            nums.add(matrix[i][right]);
        }
        right--;

        for (int i = right; i >= left && nums.size() < size; i--) {
            nums.add(matrix[bottom][i]);
        }
        bottom--;

        for (int i = bottom; i >= top && nums.size() < size; i--) {
            nums.add(matrix[i][left]);
        }
        left++;
    }
    return nums;
}

#Valid Palindrome
public boolean isPalindrome(int x) {
    
     if (x < 0) return false;

    int initValue = x;
    int reverseValue = 0;

    while (x> 0) {
        reverseValue = reverseValue * 10;
        reverseValue = reverseValue + x % 10;
        x /= 10;
    }

    if (initValue == reverseValue) return true;
    return false;
    
}

#Valid Sudoku
public boolean isValidSudoku(char[][] board) {
    Set<String> seen = new HashSet<>();
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            char num = board[i][j];
            if (num != '.') {
                if (!seen.add(num  + "in row " + i) || 
                    !seen.add(num  + "in col " + j) ||
                    !seen.add(num  + "in subbox " + i/3 + "-" + j/3)) {
                        return false;
                    }
            }
        }
    }
    return true;
}
   
#Permutations
List<List<Integer>> results = new ArrayList<>();
public List<List<Integer>> permute(int[] nums) {
    backtrack(nums, new ArrayList<>());
    return results;
}

public void backtrack(int [] nums, List<Integer> permutations) {
    if (permutations.size() == nums.length) {
        results.add(new ArrayList<>(permutations));
        return;
    }

    for (int num: nums) {
        if (permutations.contains(num)) continue;
        permutations.add(num);
        backtrack(nums, permutations);
        permutations.remove(permutations.size()-1);
    }
}

#Combinations Sum
List<List<Integer>> results = new ArrayList<>();

public List<List<Integer>> combinationSum(int[] nums, int target) {
    backtract(nums, new ArrayList<>(), target, 0, 0);
    return results;    
}

public void backtract (int [] nums, List<Integer> combs, int target, int startIndex, int sum) {
    if (sum > target) return;
    if (sum == target) {
        results.add(new ArrayList<>(combs));
        return;
    }

    for (int i = startIndex; i < nums.length; i++) {
        combs.add(nums[i]);
        backtract(nums, combs, target, i, sum + nums[i]);
        combs.remove(combs.size()-1);
    }
}

#Generate Parenthesis
List<String> res = new ArrayList<>();
public List<String> generateParenthesis(int n) {
    backtract(new StringBuilder(), 0, 0, n);
    return res;
}

public void backtract (StringBuilder sb, int leftCount, int rightCount, int n) {
    if (sb.length() == n*2) {
        res.add(sb.toString());
    }

    if (leftCount < n) {
        sb.append("(");
        backtract (sb, leftCount +1, rightCount, n);
        sb.deleteCharAt(sb.length()-1);
    }
    if (rightCount < leftCount ) {
        sb.append(")");
        backtract(sb, leftCount, rightCount + 1, n );
        sb.deleteCharAt(sb.length()-1);
    }
}

#Unique Paths
public int uniquePaths(int n, int m) {
    int [][] dp = new int [n+1][m+1];
    
    // filling first row 
    for (int i = 0; i < n; i++) {
        dp[i][0] = 1;
    }
    
    // filling first row 
    for (int j = 0; j < m; j++) {
        dp[0][j] = 1;
    } 
    
    // computing other rows
    for (int i = 1; i < n; i++) {
        for (int j = 1; j < m; j++) {
            dp[i][j] = dp[i-1][j] + dp[i][j-1];
        }
    }
    
    return dp[n-1][m-1];
}

#Remove Element
public int removeElement(int[] nums, int val) {
    int k = 0;
    int n = nums.length;
    for (int i = 0; i< n; i++) {
        if (nums[i] != val) {
            nums[k++] = nums[i];
        }
    }
    return k;
}

# Reverse integer
public int reverse(int x) {
    int remainder;
    long reversedInt = 0;
    while (x != 0) {
        remainder = x % 10;
        reversedInt = reversedInt * 10 + remainder;

        x = x / 10;
    }
    if (reversedInt < Integer.MIN_VALUE || reversedInt > Integer.MAX_VALUE) {
        return 0;
    }
    else {
        return (int) reversedInt;
    }
}

#Valid Parantheses
public boolean isValid(String s) {
    Stack<Character> stack = new Stack<>();

    for (char ch: s.toCharArray()) {
      if (ch == '(' ||ch == '[' || ch == '{') stack.push(ch);
      else if (stack.isEmpty()) return false;
      else if (ch == ')' && stack.pop() != '(') return false;
      else if (ch == ']' && stack.pop() != '[') return false;
      else if (ch == '}' && stack.pop() != '{') return false;
      
    }
    return stack.isEmpty();
}

#Add Two Numbers
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode sentinel = new ListNode(0);
    ListNode curr = sentinel;
    int carry = 0;
    while (l1 != null || l2 !=null) {
        int l1_val = l1 != null? l1.val: 0;
        int l2_val = l2 != null? l2.val : 0;
        int sum = l1_val + l2_val + carry;
        carry = sum /10;
        int last_digit = sum % 10;
        ListNode new_node = new ListNode(last_digit);
        curr.next = new_node;
        
        
        
        if (l1 != null) l1 = l1.next;
        if (l2 != null) l2 = l2.next;
        curr = curr.next;
    }
    
    if (carry > 0) {
        ListNode new_node = new ListNode(1);
        curr.next = new_node;
        curr = curr.next;
    }
    
    return sentinel.next;
}

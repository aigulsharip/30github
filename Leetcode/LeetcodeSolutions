#Word Search
class Solution {
    public boolean exist(char[][] board, String word) {
        int rows = board.length;
        int cols = board[0].length;
        boolean [][] visited = new boolean [rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (board[i][j] == word.charAt(0) && searchWord (board, word, i, j, 0, visited)) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean searchWord(char [][] board, String word, int i, int j, int count, boolean [][] visited) {
        if (count == word.length()) return true;
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length 
            || board[i][j] != word.charAt(count) || visited[i][j]) {
                return false;
            }
        visited[i][j] = true;

        if (
            searchWord (board, word, i + 1, j, count + 1, visited)
            || searchWord (board, word, i - 1, j, count + 1, visited)
            || searchWord (board, word, i, j +1, count + 1, visited)
            || searchWord (board, word, i, j -1, count + 1, visited)
        ) return true;

        visited[i][j] = false;
        return false;
    }
}
#Remove Element
class Solution {
    public int removeElement(int[] nums, int val) {
        int k = 0;
        int n = nums.length;
        for (int i = 0; i< n; i++) {
            if (nums[i] != val) {
                nums[k++] = nums[i];
            }
        }
        return k;
        
        
       
    }
    
    /*
    int reader = 0;
    int writer = 0;

    while(reader < nums.length) {
        if (nums[reader] == val) {
            reader++;
        }
        else {
            nums[writer] = nums[reader];
            reader++;
            writer++;

        }
    }
    
    */
    
    
}

# Reverse integer
class Solution {
    public int reverse(int x) {
        int remainder;
        long reversedInt = 0;
        while (x != 0) {
            remainder = x % 10;
            reversedInt = reversedInt * 10 + remainder;

            x = x / 10;
        }
        if (reversedInt < Integer.MIN_VALUE || reversedInt > Integer.MAX_VALUE) {
            return 0;
        }
        else {
            return (int) reversedInt;
        }
        
    }
}
#Valid Parantheses

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();

        for (char ch: s.toCharArray()) {
          if (ch == '(' ||ch == '[' || ch == '{') stack.push(ch);
          else if (stack.isEmpty()) return false;
          else if (ch == ')' && stack.pop() != '(') return false;
          else if (ch == ']' && stack.pop() != '[') return false;
          else if (ch == '}' && stack.pop() != '{') return false;
          
        }
        return stack.isEmpty();
    }
}


#Add Two Numbers
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode sentinel = new ListNode(0);
        ListNode curr = sentinel;
        int carry = 0;
        while (l1 != null || l2 !=null) {
            int l1_val = l1 != null? l1.val: 0;
            int l2_val = l2 != null? l2.val : 0;
            int sum = l1_val + l2_val + carry;
            carry = sum /10;
            int last_digit = sum % 10;
            ListNode new_node = new ListNode(last_digit);
            curr.next = new_node;
            
            
            
            if (l1 != null) l1 = l1.next;
            if (l2 != null) l2 = l2.next;
            curr = curr.next;
        }
        
        if (carry > 0) {
            ListNode new_node = new ListNode(1);
            curr.next = new_node;
            curr = curr.next;
        }
        
        return sentinel.next;
    }
